<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>บันทึกการรักษา - <%= patient.first_name %></title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/public/css/styles.css">
    <link rel="stylesheet" href="/public/css/visit-form.css">
</head>
<body>
    <div class="container-fluid my-4">
        <form action="/visits" method="POST" enctype="multipart/form-data" id="visit-form">
            <input type="hidden" name="patient_id" value="<%= patient.id %>">
            <input type="hidden" name="procedures" id="procedures-input">

            <div class="row">
                <!-- Left Column -->
                <div class="col-lg-8">
                    <!-- Patient & Visit Info -->
                    <div class="form-section top-card">
                        <h5 class="patient-card-header">ข้อมูลผู้ป่วย</h5>
                        <div class="patient-info-display">
                            <p><strong>ชื่อ-นามสกุล:</strong> <%= patient.first_name %> <%= patient.last_name %></p>
                            <p><strong>อายุ:</strong> <%= patient.age %></p>
                            <p><strong>เพศ:</strong> <%= patient.gender %></p>
                            <p><strong>หมายเลขประจำตัว:</strong> <%= patient.clinic_number %></p>
                            <a href="/patients/<%= patient.id %>/history" class="btn btn-sm btn-outline-primary">ดูประวัติการรักษา</a>
                        </div>

                        <hr class="my-4">

                        <h5 class="patient-card-header">ข้อมูลการเข้าพบ</h5>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="visit_date">วันที่</label>
                                <input type="datetime-local" class="form-control" id="visit_date" name="visit_date" required>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="doctor_name">แพทย์</label>
                                <input type="text" class="form-control" id="doctor_name" name="doctor_name" value="ทพญ.ใจดี">
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Blood Pressure</label>
                            <div class="bp-input-group">
                                <input type="number" class="form-control" name="bp_sys" placeholder="Systolic">
                                <span>/</span>
                                <input type="number" class="form-control" name="bp_dia" placeholder="Diastolic">
                                <span class="ml-2">mmHg</span>
                            </div>
                        </div>
                    </div>

                    <!-- Clinical Data -->
                    <div class="form-section clinical-data-section">
                        <h5>Clinical Data</h5>
                        <textarea class="form-control" name="clinical_notes" rows="3" placeholder="บันทึกรายละเอียดอาการ / ข้อวินิจฉัย / การตรวจ"></textarea>
                    </div>

                    <!-- Procedures & Tooth Chart -->
                    <div class="form-section tooth-chart-section">
                        <h5>หัตถการและการรักษา</h5>
                        <div class="procedure-quick-select mb-3">
                            <% procedure_codes.forEach(code => { %>
                                <button type="button" class="btn btn-outline-secondary btn-sm quick-add-proc" data-code="<%= code.code %>" data-desc="<%= code.description %>" data-price="<%= code.price %>">
                                    <%= code.description %>
                                </button>
                            <% }); %>
                        </div>
                        
                        <h6>ซี่ฟันที่รักษา (เลือกหลายซี่ได้)</h6>
                        <div class="tooth-type-toggle">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="tooth-type" id="adult-teeth-radio" value="adult" checked>
                                <label class="form-check-label" for="adult-teeth-radio">ฟันผู้ใหญ่ (11-48)</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="tooth-type" id="child-teeth-radio" value="child">
                                <label class="form-check-label" for="child-teeth-radio">ฟันน้ำนม (51-85)</label>
                            </div>
                        </div>

                        <div class="adult-teeth">
                            <% const adultZones = [[18, 11], [21, 28], [48, 41], [31, 38]]; %>
                            <% adultZones.forEach(zone => { %>
                                <div class="tooth-row">
                                    <% for (let i = (zone[0] > zone[1] ? zone[0] : zone[1]); i >= (zone[0] < zone[1] ? zone[0] : zone[1]); i--) { 
                                        let toothNum = (zone[0] > zone[1]) ? i : (zone[0] + zone[1] - i);
                                    %>
                                        <div class="tooth" data-tooth-id="<%= toothNum %>"><%= toothNum %></div>
                                    <% } %>
                                </div>
                            <% }); %>
                        </div>
                        <div class="child-teeth">
                            <% const childZones = [[55, 51], [61, 65], [85, 81], [71, 75]]; %>
                            <% childZones.forEach(zone => { %>
                                <div class="tooth-row">
                                    <% for (let i = (zone[0] > zone[1] ? zone[0] : zone[1]); i >= (zone[0] < zone[1] ? zone[0] : zone[1]); i--) { 
                                        let toothNum = (zone[0] > zone[1]) ? i : (zone[0] + zone[1] - i);
                                    %>
                                        <div class="tooth" data-tooth-id="<%= toothNum %>"><%= toothNum %></div>
                                    <% } %>
                                </div>
                            <% }); %>
                        </div>
                         <small class="form-text text-muted mt-2">* ถ้าเลือก "อุดฟัน" หรือรักษารากฟันที่มี "ต่อซี่" ระบบจะใช้จำนวนซี่ที่เลือกคูณกับจำนวนเงินในบิลให้อัตโนมัติ (แก้ไขได้)</small>
                    </div>

                    <!-- File Uploads -->
                    <div class="form-section">
                        <h5>ไฟล์แนบ / X-Ray</h5>
                        <div class="custom-file">
                            <input type="file" class="custom-file-input" id="xray-files" name="xrays" multiple>
                            <label class="custom-file-label" for="xray-files">เลือกไฟล์...</label>
                        </div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-lg-4">
                    <div class="form-section sticky-top treatment-summary-section">
                        <h5>รายการ/ค่าบริการวันนี้</h5>
                        <table class="treatment-list-table">
                            <thead>
                                <tr>
                                    <th>รายการ</th>
                                    <th width="100">จำนวน</th>
                                    <th width="120">ราคา/หน่วย</th>
                                    <th width="30"></th>
                                </tr>
                            </thead>
                            <tbody id="treatment-list-body">
                                <!-- Rows will be added by JS -->
                                <tr><td colspan="4" class="text-center text-muted">ยังไม่มีรายการ</td></tr>
                            </tbody>
                        </table>
                        
                        <table class="cost-summary-table">
                            <tbody>
                                <tr>
                                    <td class="label">ยอดรวม</td>
                                    <td class="value" id="subtotal">฿0.00</td>
                                </tr>
                                <tr>
                                    <td class="total-label">ยอดสุทธิ</td>
                                    <td class="total-value" id="total-amount">฿0.00</td>
                                </tr>
                            </tbody>
                        </table>

                        <div class="mt-4">
                            <button type="submit" class="btn btn-success btn-block btn-lg">บันทึกการรักษา</button>
                            <a href="/patients" class="btn btn-secondary btn-block">ยกเลิก</a>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script nonce="<%= locals.nonce %>">
    document.addEventListener('DOMContentLoaded', function() {
        // Set current date and time
        const now = new Date();
        now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
        document.getElementById('visit_date').value = now.toISOString().slice(0, 16);

        const proceduresInput = document.getElementById('procedures-input');
        const treatmentListBody = document.getElementById('treatment-list-body');
        const subtotalEl = document.getElementById('subtotal');
        const totalAmountEl = document.getElementById('total-amount');
        let treatmentItems = []; // Array to hold procedure objects
        let activeRowId = null;

        // --- Tooth Chart Logic ---
        const adultTeethDiv = document.querySelector('.adult-teeth');
        const childTeethDiv = document.querySelector('.child-teeth');
        const allTeeth = document.querySelectorAll('.tooth');

        document.querySelectorAll('input[name="tooth-type"]').forEach(radio => {
            radio.addEventListener('change', function() {
                console.log('Tooth type radio changed to:', this.value); // Debugging log
                adultTeethDiv.style.display = this.value === 'adult' ? 'block' : 'none';
                childTeethDiv.style.display = this.value === 'child' ? 'block' : 'none';
                clearToothSelection();
                // Re-sync after type change if there's an active item that uses teeth
                if (activeRowId) {
                    const activeItem = treatmentItems.find(i => i.id === activeRowId);
                    if (activeItem && activeItem.isPerTooth) {
                         console.log('Resyncing tooth selection for active item:', activeItem.id, activeItem.tooth_no); // Debugging log
                         syncToothSelection(activeItem.tooth_no);
                    }
                }
            });
        });

        allTeeth.forEach(tooth => {
            tooth.addEventListener('click', function() {
                console.log('Tooth clicked:', this.dataset.toothId); // Debugging log
                if (!activeRowId) {
                    console.log('No active row, tooth not selectable.'); // Debugging log
                    return; // Only allow selection if a procedure is active
                }

                const activeItem = treatmentItems.find(i => i.id === activeRowId);
                if (!activeItem || !activeItem.isPerTooth) {
                    console.log('Active item is not per-tooth or not found.'); // Debugging log
                    clearToothSelection();
                    return;
                }

                this.classList.toggle('selected');
                updateSelectedTeethForActiveRow();
                console.log('Tooth selection toggled. Current selected:', Array.from(document.querySelectorAll('.tooth.selected')).map(t => t.dataset.toothId)); // Debugging log
            });
        });

        function clearToothSelection() {
            console.log('Clearing all tooth selections.'); // Debugging log
            allTeeth.forEach(t => t.classList.remove('selected'));
        }

        function updateSelectedTeethForActiveRow() {
            if (!activeRowId) return;
            
            const selectedTeeth = Array.from(document.querySelectorAll('.tooth.selected'))
                                       .map(t => t.dataset.toothId);
            
            const item = treatmentItems.find(i => i.id === activeRowId);
            if(item && item.isPerTooth) {
                item.tooth_no = selectedTeeth.join(', ');
                item.qty = selectedTeeth.length > 0 ? selectedTeeth.length : 1; // Qty is count of teeth
                console.log('Updated active item tooth_no:', item.tooth_no, 'qty:', item.qty); // Debugging log
            } else if (item) {
                // If not per-tooth, ensure tooth_no is empty
                item.tooth_no = '';
                console.log('Active item is not per-tooth, tooth_no cleared.'); // Debugging log
            }
            renderAndCalculate();
        }
        
        function syncToothSelection(tooth_csv) {
            console.log('syncToothSelection called with:', tooth_csv); // Debugging log
            clearToothSelection();
            if (tooth_csv && tooth_csv.length > 0) {
                const teeth = tooth_csv.split(',').map(s => s.trim());
                teeth.forEach(toothId => {
                    const toothEl = document.querySelector(`.tooth[data-tooth-id='${toothId}']`);
                    if (toothEl) {
                        toothEl.classList.add('selected');
                        console.log('Selected tooth:', toothId); // Debugging log
                    }
                });
            }
        }

        // --- Procedure Management ---
        document.querySelectorAll('.quick-add-proc').forEach(btn => {
            btn.addEventListener('click', function() {
                const procData = {
                    code: this.dataset.code,
                    description: this.dataset.desc,
                    price: parseFloat(this.dataset.price)
                };
                console.log('Quick add procedure clicked:', procData.description); // Debugging log
                addProcedure(procData);
            });
        });

        function addProcedure(procData) {
            const isPerTooth = procData.description.includes('อุดฟัน') || procData.description.includes('รักษารากฟัน');
            console.log('addProcedure called. isPerTooth:', isPerTooth); // Debugging log
            
            if (!isPerTooth && treatmentItems.some(item => item.code === procData.code && !item.isPerTooth)) {
                alert(`${procData.description} มีอยู่ในรายการแล้ว`);
                return;
            }

            const newItem = {
                id: `proc_${Date.now()}`,
                code: procData.code,
                description: procData.description,
                price_each: procData.price,
                qty: 1, // Default quantity
                tooth_no: '',
                isPerTooth: isPerTooth
            };
            treatmentItems.push(newItem);
            setActiveRow(newItem.id);
            console.log('New item added:', newItem); // Debugging log
        }

        window.removeProcedure = function(id) {
            console.log('Before removal, treatmentItems:', treatmentItems.map(item => item.id)); // Debugging log
            treatmentItems = treatmentItems.filter(item => item.id !== id);
            console.log('After removal, treatmentItems:', treatmentItems.map(item => item.id)); // Debugging log

            if (activeRowId === id) {
                activeRowId = null; // Ensure activeRowId is cleared
                clearToothSelection(); // Clear tooth selection if active row is removed
                // Reset tooth type toggle to adult by default
                document.getElementById('adult-teeth-radio').checked = true;
                adultTeethDiv.style.display = 'block';
                childTeethDiv.style.display = 'none';
                console.log('Active row removed, reset tooth type to adult and cleared selection.'); // Debugging log
            }
            renderAndCalculate();
            console.log('renderAndCalculate called after removal.'); // Debugging log
        }

        window.updateQty = function(id, newQty) {
            console.log('Updating qty for:', id, 'to:', newQty); // Debugging log
            const item = treatmentItems.find(i => i.id === id);
            if (item && !item.isPerTooth) {
                item.qty = Math.max(0, parseInt(newQty) || 0);
            }
            renderAndCalculate();
        }
        
        window.updatePrice = function(id, newPrice) {
            console.log('Updating price for:', id, 'to:', newPrice); // Debugging log
            const item = treatmentItems.find(i => i.id === id);
            if (item) item.price_each = parseFloat(newPrice) || 0;
            renderAndCalculate();
        }

        window.setActiveRow = function(id) {
            console.log('setActiveRow called with:', id); // Debugging log
            activeRowId = id;
            const item = treatmentItems.find(i => i.id === id);
            console.log('Active item in setActiveRow:', item); // Debugging log
            
            clearToothSelection();

            // Clear active state from all rows and set for the clicked row
            document.querySelectorAll('#treatment-list-body tr').forEach(row => row.classList.remove('active-row'));
            if (id) {
                const clickedRow = document.querySelector(`#treatment-list-body tr[data-item-id='${id}']`); // Use data-item-id
                if (clickedRow) clickedRow.classList.add('active-row');
            }

            if (item && item.isPerTooth) {
                syncToothSelection(item.tooth_no);
                const selectedToothIds = item.tooth_no.split(',').map(s => s.trim()).filter(Boolean).map(Number);
                let isChildToothPresent = selectedToothIds.some(toothNum => toothNum >= 51 && toothNum <= 85);
                
                if (isChildToothPresent) {
                    document.getElementById('child-teeth-radio').checked = true;
                    adultTeethDiv.style.display = 'none';
                    childTeethDiv.style.display = 'block';
                    console.log('Set tooth type to child for item:', id); // Debugging log
                } else {
                    document.getElementById('adult-teeth-radio').checked = true;
                    adultTeethDiv.style.display = 'block';
                    childTeethDiv.style.display = 'none';
                    console.log('Set tooth type to adult for item:', id); // Debugging log
                }
            } else {
                 document.getElementById('adult-teeth-radio').checked = true;
                adultTeethDiv.style.display = 'block';
                childTeethDiv.style.display = 'none';
                console.log('Set tooth type to adult (default) for non-per-tooth item.'); // Debugging log
            }
        }

        // --- Rendering and Calculation ---
        function renderAndCalculate() {
            console.log('renderAndCalculate called. Current treatmentItems:', treatmentItems.map(item => item.id)); // Debugging log
            let subtotal = 0;
            if (treatmentItems.length === 0) {
                treatmentListBody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">ยังไม่มีรายการ</td></tr>';
            } else {
                const newHtml = treatmentItems.map(item => {
                    const total = item.qty * item.price_each;
                    subtotal += total;
                    const activeClass = item.id === activeRowId ? 'active-row' : '';
                    const qtyInputReadonly = item.isPerTooth ? 'readonly' : '';
                    return `
                        <tr class="${activeClass}" data-item-id="${item.id}">
                            <td>
                                ${item.description}
                                ${item.tooth_no && item.isPerTooth ? `<div class='text-muted small'>ซี่: ${item.tooth_no}</div>` : ''}
                            </td>
                            <td><input type="number" class="form-control" value="${item.qty}" data-item-id="${item.id}" data-field="qty" ${qtyInputReadonly}></td>
                            <td><input type="number" class="form-control" value="${item.price_each.toFixed(2)}" data-item-id="${item.id}" data-field="price_each"></td>
                            <td><i class="fas fa-trash-alt remove-proc-btn" data-item-id="${item.id}"></i></td>
                        </tr>
                    `;
                }).join('');
                treatmentListBody.innerHTML = newHtml;

                // Attach event listeners after rendering
                treatmentListBody.querySelectorAll('tr[data-item-id]').forEach(row => {
                    const itemId = row.dataset.itemId;
                    row.addEventListener('click', () => setActiveRow(itemId));

                    const qtyInput = row.querySelector('input[data-field="qty"]');
                    if (qtyInput) {
                        qtyInput.addEventListener('input', (e) => updateQty(itemId, e.target.value));
                    }

                    const priceInput = row.querySelector('input[data-field="price_each"]');
                    if (priceInput) {
                        priceInput.addEventListener('input', (e) => updatePrice(itemId, e.target.value));
                    }

                    const removeBtn = row.querySelector('.remove-proc-btn');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', (e) => {
                            e.stopPropagation(); // Prevent row click from firing
                            removeProcedure(itemId);
                        });
                    }
                });
            }
            
            subtotalEl.textContent = `฿${subtotal.toFixed(2)}`;
            totalAmountEl.textContent = `฿${subtotal.toFixed(2)}`;
            
            proceduresInput.value = JSON.stringify(treatmentItems.map(item => ({
                code: item.code,
                description: item.description,
                tooth_no: item.tooth_no,
                qty: item.qty,
                price_each: item.price_each
            })));
        }
        
        // --- File Upload Name Display ---
        document.getElementById('xray-files').addEventListener('change', function() {
            let fileName = 'เลือกไฟล์...';
            if (this.files && this.files.length > 0) {
                if (this.files.length === 1) {
                    fileName = this.files[0].name;
                } else {
                    fileName = `${this.files.length} ไฟล์ที่เลือก`;
                }
            }
            document.querySelector('.custom-file-label').textContent = fileName;
        });

        // --- Initial Render ---
        renderAndCalculate();
    });
    </script>
</body>
</html>
