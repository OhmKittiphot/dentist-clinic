<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>ประวัติการรักษา: <%= patient.first_name %> | Dentaist Clinic System</title>
  
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"> 
  <link rel="stylesheet" href="/public/css/styles.css"/> 
  <link rel="stylesheet" href="/public/css/history-custom.css"/> 
</head>
<body>
  <div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3 class="patient-name-header"><%= patient.first_name %> <%= patient.last_name %></h3>
            <div class="patient-info-chips">
                <span class="chip">CN: <%= patient.clinic_number %></span>
                <span class="chip">อายุ: <%= patient.age %></span>
                <span class="chip">เพศ: <%= patient.gender %></span>
            </div>
        </div>
        <div>
          <a href="/visits/new/<%= patient.id %>" class="btn btn-primary">+ บันทึกการรักษา</a>
          <a href="/patients" class="btn btn-secondary">กลับไปหน้ารายชื่อ</a>
        </div>
    </div>

    <div class="main-content">
      <!-- Left Panel: List -->
      <div class="panel list-panel">
        <div class="history-toolbar">
            <div class="search-wrapper">
                <i class="fa-solid fa-magnifying-glass" style="color: var(--text-muted)"></i>
                <input type="search" id="search-input" placeholder="ค้นหา (แพทย์/หัตถการ/หมายเหตุ)">
            </div>
            <div class="date-group">
                <label for="start-date-input">จาก</label>
                <input type="date" id="start-date-input">
            </div>
            <div class="date-group">
                <label for="end-date-input">ถึง</label>
                <input type="date" id="end-date-input">
            </div>
        </div>

        <div class="visit-list-header">
          <div>วันที่ / เวลา</div>
          <div>หัตถการ / สรุป</div>
          <div>ทันตแพทย์</div>
        </div>

        <div class="visit-list-body" id="visit-list-body">
            <% if(visits.length > 0) { %>
                <% visits.forEach((visit, index) => { 
                    const doctorName = visit.doctor_name || 'N/A';
                    const clinicalNotes = visit.clinical_notes || '';
                    const proceduresSummary = visit.procedures_summary || '-';
                    const searchText = (doctorName + ' ' + clinicalNotes + ' ' + proceduresSummary).toLowerCase();
                %> 
                    <a href="#" class="visit-item <%= index === 0 ? 'active' : '' %>" 
                       data-visit-id="<%= visit.id %>"
                       data-search-text="<%= searchText %>"
                       data-visit-date-iso="<%= new Date(visit.visit_date).toISOString().split('T')[0] %>">
                        
                        <div><%= new Date(visit.visit_date).toLocaleString('sv-SE', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' }).replace(' ', ' ') %></div>
                        <div><%= proceduresSummary %></div>
                        <div>ทพ. <%= doctorName %></div>
                    </a>
                <% }); %>
            <% } else { %>
                <div class="text-center p-4 text-muted">ไม่มีประวัติการรักษา</div>
            <% } %>
        </div>
      </div>

      <!-- Right Panel: Details -->
      <div class="panel detail-panel">
        <div class="detail-panel-header" id="detail-header">รายละเอียดการรักษา</div>
        <div class="detail-content" id="detail-content">
            <!-- Details populated by script -->
        </div>
      </div>
    </div>
  </div>

  <script type="application/json" id="visits-data">
    <%= JSON.stringify(visits) %>
  </script>

<script nonce="<%= locals.nonce %>">
document.addEventListener('DOMContentLoaded', function() {
    const visitsDataElement = document.getElementById('visits-data');
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = visitsDataElement.textContent;
    const allVisitsData = JSON.parse(tempDiv.textContent);
    console.log('All Visits Data (parsed):', allVisitsData); // Debugging log
    
    const visitsMap = new Map(allVisitsData.map(v => [v.id.toString(), v]));
    console.log('Visits Map:', visitsMap); // Debugging log

    const visitListBody = document.getElementById('visit-list-body');
    const visitItems = Array.from(visitListBody.querySelectorAll('.visit-item'));
    const detailHeader = document.getElementById('detail-header');
    const detailContent = document.getElementById('detail-content');
    const searchInput = document.getElementById('search-input');
    const startDateInput = document.getElementById('start-date-input');
    const endDateInput = document.getElementById('end-date-input');

    function updateDetails(visitId) {
        console.log('updateDetails called with visitId:', visitId); // Debugging log
        const visit = visitsMap.get(visitId);
        console.log('Retrieved visit:', visit); // Debugging log

        if (!visit) {
            detailHeader.textContent = 'รายละเอียดการรักษา';
            detailContent.innerHTML = `<div class="detail-content-empty">เลือกรายการจากด้านซ้ายเพื่อดูรายละเอียด</div>`;
            return;
        }

        const visitDateFormatted = new Date(visit.visit_date).toLocaleString('th-TH', {
            year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
        });
        detailHeader.textContent = `รายละเอียด (${visitDateFormatted})`;
        
        let procedures = [];
        try {
            procedures = JSON.parse(visit.procedures_list_json || '[]');
            // Filter out procedures that are effectively empty
            procedures = procedures.filter(p => 
                (p.description && p.description.trim() !== '') || 
                (p.tooth_no && p.tooth_no.trim() !== '')
            );
            // Sort procedures by tooth_no numerically, handling non-numeric values gracefully
            procedures.sort((a, b) => {
                const toothA = parseInt(a.tooth_no);
                const toothB = parseInt(b.tooth_no);

                const isANumber = !isNaN(toothA) && a.tooth_no !== '';
                const isBNumber = !isNaN(toothB) && b.tooth_no !== '';

                if (isANumber && isBNumber) {
                    return toothA - toothB;
                } else if (isANumber) {
                    return -1; // A is a number, B is not, so A comes first
                } else if (isBNumber) {
                    return 1; // B is a number, A is not, so B comes first
                } else {
                    // For non-numeric or empty tooth_no, sort by description as a fallback
                    const descA = (a.description || '').toLowerCase();
                    const descB = (b.description || '').toLowerCase();
                    if (descA < descB) return -1;
                    if (descA > descB) return 1;
                    return 0;
                }
            });
        } catch(e) { console.error("Error parsing procedures JSON for visit ID:", visit.id, e); procedures = []; }

        let xrays = [];
        try {
            xrays = JSON.parse(visit.xray_images_list_json || '[]');
        } catch(e) { console.error("Error parsing xrays JSON for visit ID:", visit.id, e); xrays = []; }

        // Refined HTML structure for better UI
        let contentHtml = `
            <div class="detail-section">
                <h5>Vital Signs</h5>
                <p>${visit.vital_signs_text || 'ไม่มีข้อมูล'}</p>
            </div>
            <div class="detail-section">
                <h5>รายการหัตถการ</h5>
                ${procedures.length > 0 ? 
                    `<ul>${procedures.map(p => `<li>${p.description}${p.tooth_no ? ` (ซี่ ${p.tooth_no})` : ''}</li>`).join('')}</ul>` : '<p>ไม่มีข้อมูล</p>'}
            </div>
            <div class="detail-section">
                <h5>ทันตแพทย์ผู้รักษา</h5>
                <p>ทพ. ${visit.doctor_name || 'N/A'}</p>
            </div>
            <div class="detail-section">
                <h5>บันทึก/ข้อสังเกต</h5>
                <p>${visit.clinical_notes || 'ไม่มีบันทึก'}</p>
            </div>
        `;

        if (xrays.length > 0) {
             contentHtml += `
            <div class="detail-section">
                <h5>X-Ray Images</h5>
                <div class="row">${xrays.map(path => `
                    <div class="col-md-4 mb-2">
                        <a href="/${path}" target="_blank"><img src="/${path}" class="img-fluid rounded" loading="lazy"></a>
                    </div>`).join('')}
                </div>
            </div>`;
        }

        detailContent.innerHTML = contentHtml;
    }

    function filterItems() {
        const searchTerm = searchInput.value.toLowerCase();
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        let firstVisible = null;

        visitItems.forEach(item => {
            const searchText = item.dataset.searchText || '';
            const visitDate = item.dataset.visitDateIso || '';

            const isSearchMatch = !searchTerm || searchText.includes(searchTerm);
            const isStartDateMatch = !startDate || visitDate >= startDate;
            const isEndDateMatch = !endDate || visitDate <= endDate;

            if (isSearchMatch && isStartDateMatch && isEndDateMatch) {
                item.style.display = 'grid';
                if (!firstVisible) firstVisible = item;
            } else {
                item.style.display = 'none';
            }
        });
        
        let currentActive = document.querySelector('.visit-item.active');
        if (!currentActive || currentActive.style.display === 'none') {
            visitItems.forEach(i => i.classList.remove('active'));
            if (firstVisible) {
                firstVisible.classList.add('active');
                updateDetails(firstVisible.dataset.visitId);
            } else {
                 updateDetails(null);
            }
        }
    }

    visitListBody.addEventListener('click', function(e) {
        const item = e.target.closest('.visit-item');
        if (item) {
            e.preventDefault();
            if (item.classList.contains('active')) return;
            
            visitItems.forEach(i => i.classList.remove('active'));
            item.classList.add('active');
            updateDetails(item.dataset.visitId);
        }
    });
    
    [searchInput, startDateInput, endDateInput].forEach(input => {
      input.addEventListener('input', () => requestAnimationFrame(filterItems));
      input.addEventListener('change', () => requestAnimationFrame(filterItems));
    });

    function initialize() {
      const initialActive = visitItems.find(item => item.classList.contains('active'));
      if (initialActive) {
          updateDetails(initialActive.dataset.visitId);
      } else if (visitItems.length > 0) {
          visitItems[0].classList.add('active');
          updateDetails(visitItems[0].dataset.visitId);
      } else {
          updateDetails(null);
      }
    }

    initialize();
});
</script>
</body>
</html>